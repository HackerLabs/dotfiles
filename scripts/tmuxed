#!/bin/bash

################################################################################
# tmuxlogin - Open multiple tmux panes, each logged into a different server
#-------------------------------------------------------------------------------
# 20110302 dale bewley net
#
# Run this within your current tmux session to open a new window, or run it in
# the absence of a tmux session to create a new one. A new window will be
# created and split it into multiple panes. They are all synchronized by default
# and will each be ready to login to a different server.
#
# TODO:
#   o Option to ssh directly rather than just send keys.
#   o Option to do something other than login to a server. I guess that would
#     make 'tmuxlogin' a bad name.
#
# BUGS:
#   o Even if you give a new name, creating a new session does not work if you
#     are attached to any existing session. This is becuase the existance of
#     $TMUX is tested before the arguments are parsed.
#
#     This can be forced if $TMUX is temporarily unset long enough to run
#     new-session. However, it seems the orignial session is killed when the
#     2nd session is closed.
#
#   o Sometimes my main session has crashed when closing the tmuxlogin window.
#     It's happened on startup too.
#
################################################################################

# defaults
SESSION=$USER
WINDOWS=3
# synchronize panes: 1=yes, 0=no
SYNC=1

usage() {
    cat <<EOF >&2
$0 - Open multiple tmux panes, each logged into a different server.

Usage: $0 [-t tmux_session_name] [-w no_of_tmux_windows] [-v]

Arguments:

 -h help
    This screen.

 -n no_synchronize
    Do not synchronize panes.

 -t tmux_session_name
    Name of existing tmux session to target, or new session.
    Default: "$SESSION"

 -v verbose
    Tell me something interesting.

 -w no_of_tmux_windows
    Number of tmux windows to create
    Default: "$WINDOWS"

EOF
}

debug() {
    echo "    Session: $SESSION"
    echo "    Windows: $WINDOWS"
    echo "Synchronize: $SYNC"
}

while getopts hvnt:u:w: opt
do
    case "$opt" in
      n)  SYNC="0";;
      t)  SESSION="$OPTARG";;
      v)  verbose=on;;
      w)  WINDOWS="$OPTARG";;
      h) usage && exit 0;;
      \?) usage && exit 1;; # unknown flag
    esac
done

open_windows() {

    SESSION_NAME=$1
    WINDOW_NAME=$2

    # create new window in this pre-existing session
    tmux new-window    -t "$SESSION_NAME" -a -n "$WINDOW_NAME"
}

if [ -n "$verbose" ]; then
   debug # show status
   sleep 1
fi

# if the session is already running, just attach to it.
tmux has-session -t $SESSION
if [ $? -eq 0 ]; then
   echo "Session $SESSION already exists. Attaching."
   sleep 1
   tmux -2 attach -t $SESSION
   exit 0;
else

   # create a new session, named $SESSION, and detach from it
   tmux -2 new-session -d -s $SESSION
   tmux rename-window -t $SESSION:1 "work"

   open_windows $SESSION "work"
   open_windows $SESSION "work"
   open_windows $SESSION "work"
   open_windows $SESSION "work"

   # all done. select starting window and get to work
   # you may need to cycle through windows and type in passwords
   # if you don't use ssh keys
   #tmux kill-window   -t $SESSION:1 # just want to leave slot 2 empty
   tmux select-window -t $SESSION:1
   tmux -2 attach -t $SESSION

fi

## Now populate the session with the windows you use every day
## Some windows I specifically want at a particular index.
## I always want IRC in window 0 and Email in window 1.
#
#tmux set-window-option -t $SESSION -g automatic-rename off
#tmux new-window    -t $SESSION:0 -k -n irc weechat-curses
#tmux set-window-option -t $SESSION:0 automatic-rename off
## this didn't seem to work. test more or just use weechat beep.pl script
##tmux set-window-option -t $SESSION:0 monitor-content $IRC_NICK
## keep window open and use respawn-window to restart
##tmux set-window-option -t $SESSION:0 remain-on-exit on
#tmux rename-window -t $SESSION:0 -n irc
#tmux new-window    -t $SESSION:1 -n mail alpine
## So that I can quickly hit ^b2<spacebar> to pause my tunes, I always put music in window 2.
## Makefile target does this: mpg123 --shuffle --control --list *m3u
##tmux new-window -t $SESSION:2 -n music 'cd ~/Music; make music'
#
#tmux new-window    -t $SESSION:2 -n temp # just to leave 2 empty
## After those base windows are statically defined, what follows depends where
## I'm working and what my focus is.
## So these new windows will just  number sequentially.
## You might prefer to use send-keys rather than execute ssh immediately...
#tmux new-window    -t $SESSION -a -n work
#tmux new-window    -t $SESSION -a -n root  'sudo su -'
#tmux new-window    -t $SESSION -a -n fw    'ssh root@boss'
#tmux new-window    -t $SESSION -a -n virt  'ssh root@sammy'
#tmux new-window    -t $SESSION -a -n lime  'ssh root@lime'
#tmux new-window    -t $SESSION -a -n scsi  'ssh root@donkey'
#tmux new-window    -t $SESSION -a -n back  'ssh root@bacula'
#tmux kill-window   -t $SESSION:2 # just want to leave slot 2 empty
##
#
#
#
#
## does this session already exist?
#tmux has-session -t "$SESSION"
#if [ $? -ne 0 ]; then
#    if [ -n "$TMUX" ]; then
#        # we are attached to a session of another name
#        attached=`tmux list-sessions | grep attached | cut -d: -f1`
#        echo "Creating new session '$SESSION' while attached to '$attached' is not well supported."
#        exit 1
#    else
#        # session does not exist. create it.
#        # this won't work if we are attached. even if the session name is different
#        # the hack is to remove $TMUX temporarily
#        tmux new-session -d -s "$SESSION"
#
#        # time to open $WINDOWS windows
#        open_windows $WINDOWS
#    fi
#fi
#
#if [ -z "$TMUX" ]; then
#    # now let's attach to the session if we aren't already attached
#    # to some session
#    tmux attach -t "$SESSION"
#fi
